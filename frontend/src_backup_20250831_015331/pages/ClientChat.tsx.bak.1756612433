import { useEffect, useState, useRef } from "react";
import { fetchPublicBranding, chat, friendlyError } from "../lib/api";
import type { Branding } from "../lib/brandingTypes";
import { BrandingStyleMapper } from "../lib/brandingToStyles";

type Message = {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  sources?: { label: string; href?: string }[];
  timestamp: Date;
};

export default function ClientChat() {
  const [branding, setBranding] = useState<Partial<Branding> | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [rateLimited, setRateLimited] = useState(false);
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const rateLimitTimeoutRef = useRef<ReturnType<typeof setTimeout> | undefined>(undefined);

  // Load branding on mount
  useEffect(() => {
    fetchPublicBranding()
      .then(setBranding)
      .catch(() => console.warn("Failed to load branding"));
  }, []);

  // Update favicon when branding changes
  useEffect(() => {
    if (!branding?.faviconUrl) return;
    const href = `${branding.faviconUrl}${branding.faviconUrl.includes('?') ? '&' : '?'}v=${Date.now()}`;
    let link = document.querySelector<HTMLLinkElement>('link[rel="icon"]');
    if (!link) {
      link = document.createElement('link');
      link.rel = 'icon';
      document.head.appendChild(link);
    }
    link.href = href;
  }, [branding?.faviconUrl]);

  // Auto-scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Focus input on mount
  useEffect(() => {
    inputRef.current?.focus();
  }, []);

  const styleMapper = branding ? new BrandingStyleMapper(branding) : null;

  const handleSend = async () => {
    if (!input.trim() || isLoading || rateLimited) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input.trim(),
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);
    setError(null);

    // Rate limiting: Prevent spam
    setRateLimited(true);
    if (rateLimitTimeoutRef.current) {
      clearTimeout(rateLimitTimeoutRef.current);
    }
    rateLimitTimeoutRef.current = setTimeout(() => {
      setRateLimited(false);
    }, 2000); // 2 second cooldown

    try {
      const response = await chat(userMessage.content);
      
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: (response.answer ?? response.reply),
        sources: response.sources,
        timestamp: new Date(),
      };

      setMessages(prev => [...prev, assistantMessage]);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Unknown error';
      const friendlyMsg = friendlyError(errorMessage);
      
      setError(friendlyMsg);
      
      // Add error message to chat
      const errorResponse: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: friendlyMsg,
        timestamp: new Date(),
      };
      
      setMessages(prev => [...prev, errorResponse]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  const clearConversation = () => {
    setMessages([]);
    setError(null);
    inputRef.current?.focus();
  };

  if (!styleMapper) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-slate-600">Loading chat interface...</div>
      </div>
    );
  }

  const pageStyle = styleMapper.getPageStyle();
  const cardStyle = styleMapper.getCardStyle();
  const titleStyle = styleMapper.getTitleStyle();
  const taglineStyle = styleMapper.getTaglineStyle();
  const chatAreaStyle = styleMapper.getChatAreaStyle();
  const inputStyle = styleMapper.getInputStyle();
  const buttonStyle = styleMapper.getButtonStyle(isLoading || rateLimited);
  const emptyStateStyle = styleMapper.getEmptyStateStyle();
  const sourceLinkStyle = styleMapper.getSourceLinkStyle();
  const loadingStyle = styleMapper.getLoadingStyle();

  // A lightweight alert style that respects branding (re-use muted/empty state colors)
  const alertTextStyle = emptyStateStyle;

  return (
    <div style={pageStyle} className="min-h-screen w-full flex items-center justify-center p-4">
      <div style={cardStyle} className="w-full mx-auto">
        {/* Header */}
        <div className="text-center mb-6">
          {branding?.logoDataUrl && (
            <img
              src={branding.logoDataUrl}
              alt="Logo"
              className="mx-auto mb-4 max-h-16 w-auto"
            />
          )}
          <h1 style={titleStyle}>
            {branding?.companyName || "Company Chat"}
          </h1>
          <p style={taglineStyle} className="mt-1">
            {branding?.taglineText || "Ask questions about your company documents."}
          </p>
        </div>

        {/* Chat Area */}
        <div style={chatAreaStyle} className="mb-4 overflow-y-auto border rounded-lg">
          <div className="p-4">
            {messages.length === 0 ? (
              <div className="text-center py-12">
                <p style={emptyStateStyle}>
                  {branding?.emptyStateText || 'Start by asking something like "What is the company dress code?"'}
                </p>
              </div>
            ) : (
              <div className="space-y-4">
                {messages.map((message) => (
                  <MessageBubble
                    key={message.id}
                    message={message}
                    styleMapper={styleMapper}
                    sourceLinkStyle={sourceLinkStyle}
                  />
                ))}
                {isLoading && (
                  <div className="flex gap-3">
                    {styleMapper.shouldShowAvatar() && styleMapper.getAvatarPosition() === 'left' && (
                      <AvatarImage styleMapper={styleMapper} />
                    )}
                    <div style={styleMapper.getBubbleStyle('assistant')} className="flex items-center gap-2">
                      <div className="flex gap-1">
                        <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                        <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                        <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
                      </div>
                      <span style={loadingStyle} className="text-xs">Thinking...</span>
                    </div>
                  </div>
                )}
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
        </div>

        {/* Error Display (branding-aware, no hardcoded red theme) */}
        {error && (
          <div className="mb-4 p-3 border rounded-lg text-sm" style={alertTextStyle}>
            <div className="flex justify-between items-start">
              <span>{error}</span>
              <button 
                onClick={() => setError(null)}
                className="ml-2"
                style={alertTextStyle}
              >
                Ã—
              </button>
            </div>
          </div>
        )}

        {/* Input Area */}
        <div className="flex gap-3">
          <input
            ref={inputRef}
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder={branding?.inputPlaceholder || "Type your question and press Enterâ€¦"}
            style={inputStyle}
            className="flex-1 outline-none"
            disabled={isLoading}
          />
          <button
            onClick={handleSend}
            disabled={!input.trim() || isLoading || rateLimited}
            style={buttonStyle}
            className="px-6 font-medium transition-all duration-200 rounded-lg"
          >
            {isLoading ? 'Sending...' : styleMapper.getSendButtonText()}
          </button>
          
          {messages.length > 0 && (
            <button
              onClick={clearConversation}
              style={buttonStyle}
              className="px-4 py-2 rounded-lg transition-colors"
            >
              Clear
            </button>
          )}
        </div>

        {/* Rate limit indicator (branding-aware text) */}
        {rateLimited && (
          <div className="mt-2 text-center text-xs" style={emptyStateStyle}>
            Please wait before sending another message...
          </div>
        )}

        {/* Audio Controls (branding-aware buttons, if enabled) */}
        {branding?.showAudioControls && (branding?.enableTextToSpeech || branding?.enableSpeechToText) && (
          <div className="mt-4 flex gap-2 justify-center">
            {branding?.enableSpeechToText && (
              <button style={buttonStyle} className="px-3 py-2 text-sm rounded-lg transition-colors">
                ðŸŽ¤ Voice Input
              </button>
            )}
            {branding?.enableTextToSpeech && (
              <button style={buttonStyle} className="px-3 py-2 text-sm rounded-lg transition-colors">
                ðŸ”Š Read Aloud
              </button>
            )}
          </div>
        )}
      </div>
    </div>
  );
}

// Message Bubble Component
const MessageBubble = ({ 
  message, 
  styleMapper, 
  sourceLinkStyle 
}: { 
  message: Message; 
  styleMapper: BrandingStyleMapper;
  sourceLinkStyle: React.CSSProperties;
}) => {
  const isUser = message.role === 'user';
  const bubbleStyle = styleMapper.getBubbleStyle(message.role);
  const shouldShowAvatar = styleMapper.shouldShowAvatar();
  const avatarPosition = styleMapper.getAvatarPosition();

  return (
    <div className={`flex gap-3 ${isUser ? 'justify-end' : ''}`}>
      {/* Left Avatar */}
      {shouldShowAvatar && avatarPosition === 'left' && !isUser && (
        <AvatarImage styleMapper={styleMapper} />
      )}
      
      {/* Message Content */}
      <div style={bubbleStyle} className="max-w-none">
        <div className="whitespace-pre-wrap break-words">
          {message.content}
        </div>
        
        {/* Sources */}
        {message.sources && message.sources.length > 0 && (
          <div className="mt-3 pt-3 border-t border-current opacity-70">
            <div className="text-xs font-medium mb-1">Sources:</div>
            <div className="space-y-1">
              {message.sources.map((source, idx) => (
                <div key={idx}>
                  {source.href ? (
                    <a
                      href={source.href}
                      target="_blank"
                      rel="noopener noreferrer"
                      style={sourceLinkStyle}
                      className="text-xs hover:opacity-80"
                    >
                      {source.label}
                    </a>
                  ) : (
                    <span className="text-xs opacity-70">
                      {source.label}
                    </span>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}
        
        {/* Timestamp */}
        <div className="text-xs opacity-50 mt-2">
          {message.timestamp.toLocaleTimeString()}
        </div>
      </div>
      
      {/* Right Avatar */}
      {shouldShowAvatar && avatarPosition === 'right' && isUser && (
        <div 
          style={styleMapper.getAvatarStyle()} 
          className="rounded-full flex-shrink-0 flex items-center justify-center"
        >
          {/* empty decorative circle if no image for user */}
        </div>
      )}
    </div>
  );
};

// Avatar Image Component
const AvatarImage = ({ 
  styleMapper 
}: { 
  styleMapper: BrandingStyleMapper;
}) => {
  const avatarUrl = styleMapper.getAvatarImageUrl();
  const avatarStyle = styleMapper.getAvatarStyle();
  
  if (avatarUrl) {
    return (
      <img
        src={avatarUrl}
        alt="Assistant"
        style={avatarStyle}
        className="object-cover flex-shrink-0"
      />
    );
  }
  
  return (
    <div 
      style={avatarStyle} 
      className="rounded-full flex-shrink-0 flex items-center justify-center"
    >
      ðŸ¤–
    </div>
  );
};

