import React, { useEffect, useState, useRef } from \"react\";\nimport { getAdminBranding, putAdminBranding } from \"../lib/api\";\nimport { Branding, DEFAULT_BRANDING, getBrandingValue } from \"../lib/brandingTypes\";\nimport { BrandingStyleMapper } from \"../lib/brandingToStyles\";\n\n// --- Helper functions ---\nfunction useDebouncedEffect(effect: () => void | (() => void), deps: any[], delay = 800) {\n  const first = useRef(true);\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      // skip first run so we don't immediately save right after load\n      if (first.current) { first.current = false; return; }\n      effect();\n    }, delay);\n    return () => clearTimeout(handler);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [...deps, delay]);\n}\n\nfunction safeStringify(obj: unknown) {\n  try { return JSON.stringify(obj, null, 2); } catch { return \"\"; }\n}\n\ntype SaveState = \"idle\" | \"saving\" | \"saved\" | \"error\";\n\nfunction SaveBadge({ state }: { state: SaveState }) {\n  const base = \"text-xs px-2 py-1 rounded border\";\n  if (state === \"saving\")   return <span className={`${base} border-amber-300 text-amber-700 bg-amber-50`}>Saving…</span>;\n  if (state === \"saved\")    return <span className={`${base} border-emerald-300 text-emerald-700 bg-emerald-50`}>Saved</span>;\n  if (state === \"error\")    return <span className={`${base} border-rose-300 text-rose-700 bg-rose-50`}>Save failed</span>;\n  return null; // idle\n}\n\n// Live Preview Component using BrandingStyleMapper\nfunction LivePreview({ branding }: { branding: Partial<Branding> }) {\n  const mapper = new BrandingStyleMapper(branding);\n  const pageStyle = mapper.getPageStyle();\n  const cardStyle = mapper.getCardStyle();\n  const titleStyle = mapper.getTitleStyle();\n  const taglineStyle = mapper.getTaglineStyle();\n  const aiBubbleStyle = mapper.getBubbleStyle('assistant');\n  const userBubbleStyle = mapper.getBubbleStyle('user');\n  const inputStyle = mapper.getInputStyle();\n  const buttonStyle = mapper.getButtonStyle();\n  const avatarStyle = mapper.getAvatarStyle();\n\n  const companyName = getBrandingValue(branding, 'companyName');\n  const taglineText = getBrandingValue(branding, 'taglineText');\n  const inputPlaceholder = getBrandingValue(branding, 'inputPlaceholder');\n  const emptyStateText = getBrandingValue(branding, 'emptyStateText');\n  const avatarPosition = getBrandingValue(branding, 'avatarPosition');\n  const avatarImageUrl = getBrandingValue(branding, 'avatarImageUrl');\n  const showAvatarOnMobile = getBrandingValue(branding, 'showAvatarOnMobile');\n\n  return (\n    <div className=\"mt-6\">\n      <h3 className=\"text-sm font-semibold text-slate-600 mb-2\">Live Preview</h3>\n      <div style={pageStyle} className=\"rounded-xl p-4 min-h-[400px]\">\n        <div style={cardStyle} className=\"border border-slate-200/50 backdrop-blur max-w-lg mx-auto\">\n          {/* Header */}\n          <div className=\"p-4 border-b border-slate-200/70\">\n            <h2 style={titleStyle} className=\"leading-tight\">{companyName}</h2>\n            <p style={taglineStyle} className=\"mt-1\">{taglineText}</p>\n          </div>\n          \n          {/* Chat Area */}\n          <div className=\"p-4 space-y-3 max-h-64 overflow-y-auto\">\n            {/* Empty state */}\n            <div className=\"text-slate-500 text-sm text-center py-4\">\n              {emptyStateText}\n            </div>\n            \n            {/* Sample conversation */}\n            <div className=\"flex justify-end\">\n              <div style={userBubbleStyle} className=\"text-sm\">\n                What are your office hours?\n              </div>\n            </div>\n            \n            <div className={`flex justify-start ${avatarPosition !== 'none' ? 'gap-2' : ''}`}>\n              {avatarPosition === 'left' && avatarImageUrl && (\n                <div \n                  style={{\n                    ...avatarStyle,\n                    backgroundImage: `url(${avatarImageUrl})`,\n                    backgroundSize: 'cover',\n                    backgroundPosition: 'center',\n                    flexShrink: 0,\n                  }}\n                  className={`${!showAvatarOnMobile ? 'hidden sm:block' : ''}`}\n                />\n              )}\n              <div style={aiBubbleStyle} className=\"text-sm\">\n                Our office hours are Monday through Friday, 9 AM to 5 PM EST. We're here to help!\n                <div className=\"mt-2 pt-2 border-t border-slate-200/50 text-xs opacity-75\">\n                  <div className=\"font-medium mb-1\">Sources</div>\n                  <div className=\"underline cursor-pointer\">Employee Handbook - Office Hours Policy</div>\n                </div>\n              </div>\n              {avatarPosition === 'right' && avatarImageUrl && (\n                <div \n                  style={{\n                    ...avatarStyle,\n                    backgroundImage: `url(${avatarImageUrl})`,\n                    backgroundSize: 'cover',\n                    backgroundPosition: 'center',\n                    flexShrink: 0,\n                  }}\n                  className={`${!showAvatarOnMobile ? 'hidden sm:block' : ''}`}\n                />\n              )}\n            </div>\n          </div>\n          \n          {/* Input area */}\n          <div className=\"p-4 border-t border-slate-200/70\">\n            <div className=\"flex gap-2\">\n              <input \n                style={inputStyle} \n                className=\"flex-1 border border-slate-300 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500/50\" \n                placeholder={inputPlaceholder}\n                disabled\n              />\n              <button \n                style={buttonStyle} \n                className=\"px-4 text-white transition-colors\"\n                disabled\n              >\n                Send\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Form Section Component\nfunction FormSection({ title, children }: { title: string; children: React.ReactNode }) {\n  return (\n    <section className=\"bg-gray-50 rounded-lg p-4 space-y-4\">\n      <h2 className=\"text-lg font-medium text-slate-800\">{title}</h2>\n      {children}\n    </section>\n  );\n}\n\n// Input components\nfunction TextInput({ \n  label, \n  value, \n  onChange, \n  placeholder, \n  type = \"text\",\n  helper\n}: {\n  label: string;\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  type?: string;\n  helper?: string;\n}) {\n  return (\n    <label className=\"block\">\n      <span className=\"text-sm font-medium text-slate-700\">{label}</span>\n      {helper && <div className=\"text-xs text-slate-500 mt-0.5\">{helper}</div>}\n      <input \n        type={type}\n        className=\"w-full border rounded-lg px-3 py-2 mt-1 focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        placeholder={placeholder}\n      />\n    </label>\n  );\n}\n\nfunction NumberSlider({ \n  label, \n  value, \n  onChange, \n  min, \n  max, \n  step = 1,\n  unit = 'px',\n  helper\n}: {\n  label: string;\n  value: number;\n  onChange: (value: number) => void;\n  min: number;\n  max: number;\n  step?: number;\n  unit?: string;\n  helper?: string;\n}) {\n  return (\n    <label className=\"block\">\n      <span className=\"text-sm font-medium text-slate-700\">{label}</span>\n      {helper && <div className=\"text-xs text-slate-500 mt-0.5\">{helper}</div>}\n      <input \n        type=\"range\"\n        className=\"w-full mt-1\"\n        min={min}\n        max={max}\n        step={step}\n        value={value}\n        onChange={(e) => onChange(parseFloat(e.target.value))}\n      />\n      <div className=\"text-xs text-gray-500 mt-1\">{value}{unit}</div>\n    </label>\n  );\n}\n\nfunction ColorPicker({ \n  label, \n  value, \n  onChange,\n  helper\n}: {\n  label: string;\n  value: string;\n  onChange: (value: string) => void;\n  helper?: string;\n}) {\n  return (\n    <label className=\"block\">\n      <span className=\"text-sm font-medium text-slate-700\">{label}</span>\n      {helper && <div className=\"text-xs text-slate-500 mt-0.5\">{helper}</div>}\n      <input \n        type=\"color\"\n        className=\"w-full border rounded-lg h-10 mt-1 cursor-pointer\"\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n      />\n    </label>\n  );\n}\n\nfunction SelectInput({ \n  label, \n  value, \n  onChange, \n  options,\n  helper\n}: {\n  label: string;\n  value: string;\n  onChange: (value: string) => void;\n  options: { value: string; label: string }[];\n  helper?: string;\n}) {\n  return (\n    <label className=\"block\">\n      <span className=\"text-sm font-medium text-slate-700\">{label}</span>\n      {helper && <div className=\"text-xs text-slate-500 mt-0.5\">{helper}</div>}\n      <select \n        className=\"w-full border rounded-lg px-3 py-2 mt-1 focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n      >\n        {options.map((opt) => (\n          <option key={opt.value} value={opt.value}>{opt.label}</option>\n        ))}\n      </select>\n    </label>\n  );\n}\n\nfunction CheckboxInput({ \n  label, \n  checked, \n  onChange,\n  helper\n}: {\n  label: string;\n  checked: boolean;\n  onChange: (checked: boolean) => void;\n  helper?: string;\n}) {\n  return (\n    <label className=\"flex items-start gap-2 cursor-pointer\">\n      <input \n        type=\"checkbox\"\n        className=\"h-4 w-4 mt-0.5 rounded border-gray-300 text-blue-600 focus:ring-blue-500/50\"\n        checked={checked}\n        onChange={(e) => onChange(e.target.checked)}\n      />\n      <div>\n        <span className=\"text-sm font-medium text-slate-700\">{label}</span>\n        {helper && <div className=\"text-xs text-slate-500 mt-0.5\">{helper}</div>}\n      </div>\n    </label>\n  );\n}\n\nexport default function AdminBranding() {\n  const [settings, setSettings] = useState<Partial<Branding>>({});\n  const [loadedJSON, setLoadedJSON] = useState<string>(\"\");\n  const [lastSavedJSON, setLastSavedJSON] = useState<string>(\"\");\n  const [saveState, setSaveState] = useState<SaveState>(\"idle\");\n  const [autoSave, setAutoSave] = useState<boolean>(() => {\n    const v = localStorage.getItem(\"admin.autoSave\");\n    return v ? v === \"true\" : true; // default ON\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n\n  // Helper function to update settings\n  const updateSettings = (updates: Partial<Branding>) => {\n    setSettings(prev => ({ ...prev, ...updates }));\n  };\n\n  // Helper to update nested objects\n  const updateNestedSettings = <T extends keyof Branding>(\n    key: T, \n    updates: Partial<NonNullable<Branding[T]>>\n  ) => {\n    setSettings(prev => ({\n      ...prev,\n      [key]: { ...prev[key], ...updates }\n    }));\n  };\n\n  // 1) Load current admin branding on mount\n  useEffect(() => {\n    (async () => {\n      try {\n        const auth = localStorage.getItem(\"auth\") ?? \"\";\n        const b = await getAdminBranding(auth);\n        setSettings(b);\n        const snap = safeStringify(b);\n        setLoadedJSON(snap);\n        setLastSavedJSON(snap);\n        setSaveState(\"idle\");\n        setLoading(false);\n      } catch (e: any) {\n        console.error(\"load admin branding failed\", e);\n        setError(`Load failed: ${e?.message ?? \"error\"}`);\n        setLoading(false);\n      }\n    })();\n  }, []);\n\n  // 2) Debounced auto-save\n  useDebouncedEffect(() => {\n    if (!autoSave) return;\n\n    const current = safeStringify(settings);\n    if (!current || current === lastSavedJSON) return;\n\n    (async () => {\n      try {\n        setSaveState(\"saving\");\n        const auth = localStorage.getItem(\"auth\") ?? \"\";\n        const saved = await putAdminBranding(auth, settings);\n        const snap = safeStringify(saved);\n        setLastSavedJSON(snap);\n        setSaveState(\"saved\");\n        // reset indicator after a moment\n        setTimeout(() => setSaveState(\"idle\"), 1500);\n      } catch (e: any) {\n        console.error(\"autoSave failed\", e);\n        setSaveState(\"error\");\n      }\n    })();\n  }, [settings, autoSave], 800);\n\n  // Manual save function\n  async function manualSave() {\n    try {\n      setSaveState(\"saving\");\n      const auth = localStorage.getItem(\"auth\") ?? \"\";\n      const saved = await putAdminBranding(auth, settings);\n      const snap = safeStringify(saved);\n      setLastSavedJSON(snap);\n      setSaveState(\"saved\");\n      setTimeout(() => setSaveState(\"idle\"), 2000);\n    } catch (e: any) {\n      console.error(\"manual save failed\", e);\n      setSaveState(\"error\");\n    }\n  }\n\n  // Revert to last saved\n  function revertSettings() {\n    if (lastSavedJSON) {\n      try {\n        const saved = JSON.parse(lastSavedJSON);\n        setSettings(saved);\n        setSaveState(\"idle\");\n      } catch (e) {\n        console.error(\"Failed to parse saved settings\", e);\n      }\n    }\n  }\n\n  const isDirty = safeStringify(settings) !== lastSavedJSON;\n\n  if (loading) return (\n    <div className=\"min-h-screen grid place-items-center\">\n      <div className=\"text-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n        <div>Loading branding settings...</div>\n      </div>\n    </div>\n  );\n  \n  if (error) return (\n    <div className=\"min-h-screen grid place-items-center text-red-600\">\n      <div className=\"text-center\">\n        <div className=\"text-4xl mb-4\">⚠️</div>\n        <div>{error}</div>\n        <button \n          onClick={() => window.location.reload()} \n          className=\"mt-4 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700\"\n        >\n          Retry\n        </button>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen p-6 bg-zinc-100\">\n      <div className=\"max-w-7xl mx-auto bg-white rounded-2xl shadow-lg p-6 space-y-6\">\n        {/* Header */}\n        <header className=\"flex items-center justify-between border-b pb-4\">\n          <div>\n            <h1 className=\"text-2xl font-semibold text-slate-900\">Branding Settings</h1>\n            <p className=\"text-sm text-slate-600 mt-1\">Customize your company chat interface and experience</p>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <label className=\"inline-flex items-center gap-2 cursor-pointer select-none\">\n              <input\n                type=\"checkbox\"\n                className=\"h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500\"\n                checked={autoSave}\n                onChange={(e) => {\n                  const v = e.target.checked;\n                  setAutoSave(v);\n                  localStorage.setItem(\"admin.autoSave\", String(v));\n                }}\n              />\n              <span className=\"text-sm text-slate-700 font-medium\">Auto-Save (Update Live)</span>\n            </label>\n            \n            {isDirty && !autoSave && (\n              <div className=\"h-2 w-2 rounded-full bg-orange-500\" title=\"Unsaved changes\" />\n            )}\n            \n            <SaveBadge state={saveState} />\n            \n            {!autoSave && isDirty && (\n              <button \n                onClick={revertSettings}\n                className=\"text-sm px-3 py-1.5 rounded-lg border border-slate-300 text-slate-700 hover:bg-slate-50\"\n              >\n                Revert\n              </button>\n            )}\n            \n            <button \n              onClick={manualSave} \n              disabled={saveState === \"saving\"} \n              className=\"rounded-lg bg-blue-600 text-white px-4 py-2 font-medium disabled:opacity-50 hover:bg-blue-700 transition-colors\"\n            >\n              {saveState === \"saving\" ? \"Saving…\" : \"Save\"}\n            </button>\n          </div>\n        </header>\n\n        <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n          {/* Settings Panel */}\n          <div className=\"space-y-6 max-h-[80vh] overflow-y-auto pr-2\">\n            \n            {/* Basic Settings */}\n            <FormSection title=\"Basic\">\n              <div className=\"grid grid-cols-1 gap-4\">\n                <TextInput\n                  label=\"Company Name\"\n                  value={settings.companyName ?? ''}\n                  onChange={(value) => updateSettings({ companyName: value })}\n                  placeholder=\"Enter your company name\"\n                  helper=\"Displayed in the chat header\"\n                />\n                \n                <TextInput\n                  label=\"Tagline Text\"\n                  value={settings.taglineText ?? ''}\n                  onChange={(value) => updateSettings({ taglineText: value })}\n                  placeholder=\"Your company tagline or description\"\n                  helper=\"Subtitle shown below the company name\"\n                />\n                \n                <TextInput\n                  label=\"Empty State Text\"\n                  value={settings.emptyStateText ?? ''}\n                  onChange={(value) => updateSettings({ emptyStateText: value })}\n                  placeholder=\"Ask me anything about our company documents!\"\n                  helper=\"Message shown when no conversation has started\"\n                />\n                \n                <TextInput\n                  label=\"Input Placeholder\"\n                  value={settings.inputPlaceholder ?? ''}\n                  onChange={(value) => updateSettings({ inputPlaceholder: value })}\n                  placeholder=\"Type your question and press Enter…\"\n                  helper=\"Placeholder text in the message input\"\n                />\n              </div>\n            </FormSection>\n\n            {/* Typography */}\n            <FormSection title=\"Typography\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <SelectInput\n                  label=\"Font Family\"\n                  value={settings.fontFamily ?? 'system-ui'}\n                  onChange={(value) => updateSettings({ fontFamily: value })}\n                  options={[\n                    { value: 'system-ui', label: 'System UI' },\n                    { value: 'Inter, sans-serif', label: 'Inter' },\n                    { value: 'Roboto, sans-serif', label: 'Roboto' },\n                    { value: \"'Open Sans', sans-serif\", label: 'Open Sans' },\n                    { value: 'Poppins, sans-serif', label: 'Poppins' },\n                    { value: 'lora', label: 'Lora' },\n                    { value: 'Arial, sans-serif', label: 'Arial' },\n                    { value: 'Georgia, serif', label: 'Georgia' },\n                    { value: \"'Times New Roman', serif\", label: 'Times' },\n                    { value: \"'Courier New', monospace\", label: 'Courier' },\n                  ]}\n                  helper=\"Font for all text elements\"\n                />\n                \n                <NumberSlider\n                  label=\"Title Font Size\"\n                  value={settings.titleFontSize ?? 20}\n                  onChange={(value) => updateSettings({ titleFontSize: value })}\n                  min={16} max={48} step={2}\n                  helper=\"Company name font size\"\n                />\n                \n                <NumberSlider\n                  label=\"Body Font Size\"\n                  value={settings.bodyFontSize ?? 14}\n                  onChange={(value) => updateSettings({ bodyFontSize: value })}\n                  min={10} max={24}\n                  helper=\"General text and message font size\"\n                />\n                \n                <NumberSlider\n                  label=\"Tagline Font Size\"\n                  value={settings.taglineFontSize ?? 14}\n                  onChange={(value) => updateSettings({ taglineFontSize: value })}\n                  min={10} max={24}\n                  helper=\"Tagline text font size\"\n                />\n                \n                <div className=\"flex flex-wrap gap-4\">\n                  <CheckboxInput\n                    label=\"Title Bold\"\n                    checked={settings.titleBold ?? true}\n                    onChange={(checked) => updateSettings({ titleBold: checked })}\n                  />\n                  <CheckboxInput\n                    label=\"Title Italic\"\n                    checked={settings.titleItalic ?? false}\n                    onChange={(checked) => updateSettings({ titleItalic: checked })}\n                  />\n                  <CheckboxInput\n                    label=\"Tagline Bold\"\n                    checked={settings.taglineBold ?? false}\n                    onChange={(checked) => updateSettings({ taglineBold: checked })}\n                  />\n                  <CheckboxInput\n                    label=\"Tagline Italic\"\n                    checked={settings.taglineItalic ?? false}\n                    onChange={(checked) => updateSettings({ taglineItalic: checked })}\n                  />\n                </div>\n              </div>\n            </FormSection>\n\n            {/* Colors */}\n            <FormSection title=\"Colors\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <ColorPicker\n                  label=\"Primary Color\"\n                  value={settings.colors?.primary ?? '#4f46e5'}\n                  onChange={(value) => updateNestedSettings('colors', { primary: value })}\n                  helper=\"Main accent color for buttons and links\"\n                />\n                \n                <ColorPicker\n                  label=\"Accent Color\"\n                  value={settings.colors?.accent ?? '#4338ca'}\n                  onChange={(value) => updateNestedSettings('colors', { accent: value })}\n                  helper=\"Hover and active states\"\n                />\n                \n                <ColorPicker\n                  label=\"Text Color\"\n                  value={settings.textColor ?? '#0f172a'}\n                  onChange={(value) => updateSettings({ textColor: value })}\n                  helper=\"Main text color\"\n                />\n                \n                <ColorPicker\n                  label=\"Muted Text Color\"\n                  value={settings.mutedTextColor ?? '#64748b'}\n                  onChange={(value) => updateSettings({ mutedTextColor: value })}\n                  helper=\"Secondary text and hints\"\n                />\n              </div>\n            </FormSection>\n\n            {/* Chat Bubbles */}\n            <FormSection title=\"Chat Bubbles\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <ColorPicker\n                  label=\"AI Bubble Background\"\n                  value={settings.bubbles?.aiBg ?? '#f1f5f9'}\n                  onChange={(value) => updateNestedSettings('bubbles', { aiBg: value })}\n                  helper=\"Background color for AI responses\"\n                />\n                \n                <ColorPicker\n                  label=\"User Bubble Background\"\n                  value={settings.bubbles?.userBg ?? '#4f46e5'}\n                  onChange={(value) => updateNestedSettings('bubbles', { userBg: value })}\n                  helper=\"Background color for user messages\"\n                />\n                \n                <ColorPicker\n                  label=\"AI Text Color\"\n                  value={settings.aiTextColor ?? '#0f172a'}\n                  onChange={(value) => updateSettings({ aiTextColor: value })}\n                  helper=\"Text color in AI bubbles\"\n                />\n                \n                <ColorPicker\n                  label=\"User Text Color\"\n                  value={settings.userTextColor ?? '#ffffff'}\n                  onChange={(value) => updateSettings({ userTextColor: value })}\n                  helper=\"Text color in user bubbles\"\n                />\n                \n                <NumberSlider\n                  label=\"Bubble Padding\"\n                  value={settings.bubblePadding ?? 12}\n                  onChange={(value) => updateSettings({ bubblePadding: value })}\n                  min={4} max={24} step={2}\n                  helper=\"Inner spacing in chat bubbles\"\n                />\n                \n                <NumberSlider\n                  label=\"Bubble Max Width\"\n                  value={settings.bubbleMaxWidth ?? 70}\n                  onChange={(value) => updateSettings({ bubbleMaxWidth: value })}\n                  min={40} max={90} step={5}\n                  unit=\"%\"\n                  helper=\"Maximum width of chat bubbles\"\n                />\n                \n                <TextInput\n                  label=\"Bubble Radius\"\n                  value={settings.bubbles?.radius ?? '1rem'}\n                  onChange={(value) => updateNestedSettings('bubbles', { radius: value })}\n                  placeholder=\"1rem\"\n                  helper=\"Border radius (CSS value)\"\n                />\n                \n                <NumberSlider\n                  label=\"Message Spacing\"\n                  value={settings.messageSpacing ?? 16}\n                  onChange={(value) => updateSettings({ messageSpacing: value })}\n                  min={8} max={32} step={2}\n                  helper=\"Space between messages\"\n                />\n                \n                <TextInput\n                  label=\"AI Bubble Border\"\n                  value={settings.aiBubbleBorder ?? 'none'}\n                  onChange={(value) => updateSettings({ aiBubbleBorder: value })}\n                  placeholder=\"none\"\n                  helper=\"Border style (CSS value)\"\n                />\n                \n                <TextInput\n                  label=\"User Bubble Border\"\n                  value={settings.userBubbleBorder ?? 'none'}\n                  onChange={(value) => updateSettings({ userBubbleBorder: value })}\n                  placeholder=\"none\"\n                  helper=\"Border style (CSS value)\"\n                />\n              </div>\n            </FormSection>\n\n            {/* Card/Layout */}\n            <FormSection title=\"Card/Layout\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <TextInput\n                  label=\"Chat Width\"\n                  value={settings.chatWidth?.toString() ?? '64rem'}\n                  onChange={(value) => updateSettings({ chatWidth: value })}\n                  placeholder=\"64rem\"\n                  helper=\"Maximum width of chat container\"\n                />\n                \n                <TextInput\n                  label=\"Chat Height\"\n                  value={settings.chatHeight?.toString() ?? '60vh'}\n                  onChange={(value) => updateSettings({ chatHeight: value })}\n                  placeholder=\"60vh\"\n                  helper=\"Height of chat message area\"\n                />\n                \n                <NumberSlider\n                  label=\"Card Radius\"\n                  value={typeof settings.cardRadius === 'number' ? settings.cardRadius : 16}\n                  onChange={(value) => updateSettings({ cardRadius: value })}\n                  min={0} max={32} step={2}\n                  helper=\"Border radius of chat card\"\n                />\n                \n                <NumberSlider\n                  label=\"Card Padding\"\n                  value={settings.cardPadding ?? 0}\n                  onChange={(value) => updateSettings({ cardPadding: value })}\n                  min={0} max={48} step={4}\n                  helper=\"Inner padding of chat card\"\n                />\n                \n                <NumberSlider\n                  label=\"Input Height\"\n                  value={settings.inputHeight ?? 48}\n                  onChange={(value) => updateSettings({ inputHeight: value })}\n                  min={32} max={64} step={4}\n                  helper=\"Height of message input\"\n                />\n                \n                <NumberSlider\n                  label=\"Input Radius\"\n                  value={typeof settings.inputRadius === 'number' ? settings.inputRadius : 12}\n                  onChange={(value) => updateSettings({ inputRadius: value })}\n                  min={0} max={24} step={2}\n                  helper=\"Border radius of input\"\n                />\n                \n                <NumberSlider\n                  label=\"Chat Offset Top\"\n                  value={typeof settings.chatOffsetTop === 'number' ? settings.chatOffsetTop : 16}\n                  onChange={(value) => updateSettings({ chatOffsetTop: value })}\n                  min={0} max={48} step={4}\n                  helper=\"Top padding in chat area\"\n                />\n              </div>\n            </FormSection>\n\n            {/* Backgrounds/Shadow */}\n            <FormSection title=\"Backgrounds & Shadow\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <ColorPicker\n                  label=\"Page Background Color\"\n                  value={settings.pageBackgroundColor ?? '#f8fafc'}\n                  onChange={(value) => updateSettings({ pageBackgroundColor: value })}\n                  helper=\"Background behind the chat card\"\n                />\n                \n                <TextInput\n                  label=\"Page Background URL\"\n                  value={settings.pageBackgroundUrl ?? ''}\n                  onChange={(value) => updateSettings({ pageBackgroundUrl: value || null })}\n                  placeholder=\"https://example.com/bg.jpg\"\n                  helper=\"Background image URL (overrides color)\"\n                />\n                \n                <ColorPicker\n                  label=\"Card Background Color\"\n                  value={settings.cardBackgroundColor ?? 'rgba(255,255,255,0.9)'}\n                  onChange={(value) => updateSettings({ cardBackgroundColor: value })}\n                  helper=\"Chat card background\"\n                />\n                \n                <TextInput\n                  label=\"Card Background URL\"\n                  value={settings.cardBackgroundUrl ?? ''}\n                  onChange={(value) => updateSettings({ cardBackgroundUrl: value || null })}\n                  placeholder=\"https://example.com/card-bg.jpg\"\n                  helper=\"Card background image\"\n                />\n                \n                <NumberSlider\n                  label=\"Card Opacity\"\n                  value={settings.cardOpacity ?? 90}\n                  onChange={(value) => updateSettings({ cardOpacity: value })}\n                  min={10} max={100} step={5}\n                  unit=\"%\"\n                  helper=\"Transparency of card background\"\n                />\n                \n                <TextInput\n                  label=\"Card Background CSS Override\"\n                  value={settings.cardBackgroundCssOverride ?? ''}\n                  onChange={(value) => updateSettings({ cardBackgroundCssOverride: value })}\n                  placeholder=\"custom CSS background\"\n                  helper=\"Advanced: custom CSS background\"\n                />\n                \n                <div className=\"col-span-2\">\n                  <CheckboxInput\n                    label=\"Enable Shadow\"\n                    checked={settings.enableShadow ?? true}\n                    onChange={(checked) => updateSettings({ enableShadow: checked })}\n                    helper=\"Add drop shadow to the chat card\"\n                  />\n                </div>\n                \n                {settings.enableShadow && (\n                  <>\n                    <ColorPicker\n                      label=\"Shadow Color\"\n                      value={settings.shadowColor ?? '#000000'}\n                      onChange={(value) => updateSettings({ shadowColor: value })}\n                      helper=\"Color of the drop shadow\"\n                    />\n                    \n                    <NumberSlider\n                      label=\"Shadow Blur\"\n                      value={settings.shadowBlur ?? 10}\n                      onChange={(value) => updateSettings({ shadowBlur: value })}\n                      min={0} max={30}\n                      helper=\"Blur amount of shadow\"\n                    />\n                    \n                    <NumberSlider\n                      label=\"Shadow Spread\"\n                      value={settings.shadowSpread ?? 0}\n                      onChange={(value) => updateSettings({ shadowSpread: value })}\n                      min={-10} max={10}\n                      helper=\"Shadow spread radius\"\n                    />\n                    \n                    <NumberSlider\n                      label=\"Shadow Opacity\"\n                      value={settings.shadowOpacity ?? 20}\n                      onChange={(value) => updateSettings({ shadowOpacity: value })}\n                      min={0} max={100} step={5}\n                      unit=\"%\"\n                      helper=\"Transparency of shadow\"\n                    />\n                  </>\n                )}\n                \n                <div className=\"col-span-2\">\n                  <CheckboxInput\n                    label=\"Enable Glow\"\n                    checked={settings.enableGlow ?? false}\n                    onChange={(checked) => updateSettings({ enableGlow: checked })}\n                    helper=\"Add subtle glow effect to chat card\"\n                  />\n                </div>\n              </div>\n            </FormSection>\n\n            {/* Robot/Avatar */}\n            <FormSection title=\"Robot/Avatar\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <TextInput\n                  label=\"Avatar Image URL\"\n                  value={settings.avatarImageUrl ?? ''}\n                  onChange={(value) => updateSettings({ avatarImageUrl: value || null })}\n                  placeholder=\"https://example.com/avatar.png\"\n                  helper=\"Avatar image for AI responses\"\n                />\n                \n                <NumberSlider\n                  label=\"Avatar Size\"\n                  value={settings.avatarSize ?? 40}\n                  onChange={(value) => updateSettings({ avatarSize: value })}\n                  min={24} max={80} step={4}\n                  helper=\"Size of avatar image\"\n                />\n                \n                <SelectInput\n                  label=\"Avatar Position\"\n                  value={settings.avatarPosition ?? 'left'}\n                  onChange={(value) => updateSettings({ avatarPosition: value as any })}\n                  options={[\n                    { value: 'none', label: 'None' },\n                    { value: 'left', label: 'Left' },\n                    { value: 'right', label: 'Right' },\n                  ]}\n                  helper=\"Position relative to AI messages\"\n                />\n                \n                <SelectInput\n                  label=\"Avatar Shape\"\n                  value={settings.avatarShape ?? 'circle'}\n                  onChange={(value) => updateSettings({ avatarShape: value as any })}\n                  options={[\n                    { value: 'circle', label: 'Circle' },\n                    { value: 'rounded', label: 'Rounded' },\n                    { value: 'square', label: 'Square' },\n                  ]}\n                  helper=\"Shape of avatar\"\n                />\n                \n                <div className=\"col-span-2\">\n                  <CheckboxInput\n                    label=\"Show Avatar on Mobile\"\n                    checked={settings.showAvatarOnMobile ?? true}\n                    onChange={(checked) => updateSettings({ showAvatarOnMobile: checked })}\n                    helper=\"Display avatar on mobile devices\"\n                  />\n                </div>\n              </div>\n            </FormSection>\n\n            {/* Advanced Settings Toggle */}\n            <button\n              onClick={() => setShowAdvanced(!showAdvanced)}\n              className=\"w-full p-4 rounded-lg border-2 border-dashed border-slate-300 text-slate-600 hover:border-slate-400 hover:text-slate-700 transition-colors font-medium\"\n            >\n              {showAdvanced ? '▼ Hide' : '▶ Show'} Advanced Settings (Audio & LLM)\n            </button>\n\n            {showAdvanced && (\n              <>\n                {/* Audio / Speech */}\n                <FormSection title=\"Audio / Speech\">\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 gap-4\">\n                      <CheckboxInput\n                        label=\"Enable Text-to-Speech\"\n                        checked={settings.enableTextToSpeech ?? false}\n                        onChange={(checked) => updateSettings({ enableTextToSpeech: checked })}\n                        helper=\"Allow AI responses to be read aloud\"\n                      />\n                      \n                      {settings.enableTextToSpeech && (\n                        <div className=\"grid grid-cols-2 gap-4 ml-6\">\n                          <TextInput\n                            label=\"TTS Voice\"\n                            value={settings.ttsVoice ?? 'default'}\n                            onChange={(value) => updateSettings({ ttsVoice: value })}\n                            placeholder=\"default\"\n                            helper=\"Voice ID or name for TTS\"\n                          />\n                          \n                          <NumberSlider\n                            label=\"TTS Speed\"\n                            value={settings.ttsSpeed ?? 1}\n                            onChange={(value) => updateSettings({ ttsSpeed: value })}\n                            min={0.5} max={2} step={0.1}\n                            unit=\"x\"\n                            helper=\"Speech playback speed\"\n                          />\n                          \n                          <div className=\"col-span-2\">\n                            <CheckboxInput\n                              label=\"Auto-play TTS\"\n                              checked={settings.ttsAutoPlay ?? false}\n                              onChange={(checked) => updateSettings({ ttsAutoPlay: checked })}\n                              helper=\"Automatically read AI responses\"\n                            />\n                          </div>\n                        </div>\n                      )}\n                      \n                      <CheckboxInput\n                        label=\"Enable Speech-to-Text\"\n                        checked={settings.enableSpeechToText ?? false}\n                        onChange={(checked) => updateSettings({ enableSpeechToText: checked })}\n                        helper=\"Allow voice input for messages\"\n                      />\n                      \n                      {settings.enableSpeechToText && (\n                        <div className=\"grid grid-cols-2 gap-4 ml-6\">\n                          <TextInput\n                            label=\"STT Language\"\n                            value={settings.sttLanguage ?? 'en-US'}\n                            onChange={(value) => updateSettings({ sttLanguage: value })}\n                            placeholder=\"en-US\"\n                            helper=\"Language code for speech recognition\"\n                          />\n                          \n                          <div className=\"col-span-2\">\n                            <CheckboxInput\n                              label=\"Auto-send after STT\"\n                              checked={settings.sttAutoSend ?? false}\n                              onChange={(checked) => updateSettings({ sttAutoSend: checked })}\n                              helper=\"Automatically send message after voice input\"\n                            />\n                          </div>\n                        </div>\n                      )}\n                      \n                      <CheckboxInput\n                        label=\"Show Audio Controls\"\n                        checked={settings.showAudioControls ?? true}\n                        onChange={(checked) => updateSettings({ showAudioControls: checked })}\n                        helper=\"Display audio control buttons in UI\"\n                      />\n                    </div>\n                  </div>\n                </FormSection>\n\n                {/* LLM Controls */}\n                <FormSection title=\"LLM Controls\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <TextInput\n                      label=\"AI Model\"\n                      value={settings.aiModel ?? 'gpt-4'}\n                      onChange={(value) => updateSettings({ aiModel: value })}\n                      placeholder=\"gpt-4\"\n                      helper=\"Language model to use\"\n                    />\n                    \n                    <NumberSlider\n                      label=\"Temperature\"\n                      value={settings.aiTemperature ?? 0.7}\n                      onChange={(value) => updateSettings({ aiTemperature: value })}\n                      min={0} max={2} step={0.1}\n                      unit=\"\"\n                      helper=\"Creativity/randomness (0=focused, 2=creative)\"\n                    />\n                    \n                    <NumberSlider\n                      label=\"Max Tokens\"\n                      value={settings.aiMaxTokens ?? 2048}\n                      onChange={(value) => updateSettings({ aiMaxTokens: value })}\n                      min={512} max={8192} step={256}\n                      unit=\"\"\n                      helper=\"Maximum response length\"\n                    />\n                    \n                    <NumberSlider\n                      label=\"Top K\"\n                      value={settings.aiTopK ?? 50}\n                      onChange={(value) => updateSettings({ aiTopK: value })}\n                      min={1} max={100}\n                      unit=\"\"\n                      helper=\"Top-K sampling parameter\"\n                    />\n                    \n                    <SelectInput\n                      label=\"AI Strictness\"\n                      value={settings.aiStrictness ?? 'balanced'}\n                      onChange={(value) => updateSettings({ aiStrictness: value as any })}\n                      options={[\n                        { value: 'creative', label: 'Creative' },\n                        { value: 'balanced', label: 'Balanced' },\n                        { value: 'precise', label: 'Precise' },\n                      ]}\n                      helper=\"Response style and accuracy\"\n                    />\n                    \n                    <div className=\"col-span-2\">\n                      <label className=\"block\">\n                        <span className=\"text-sm font-medium text-slate-700\">System Prompt</span>\n                        <div className=\"text-xs text-slate-500 mt-0.5\">Instructions that guide the AI's behavior</div>\n                        <textarea \n                          className=\"w-full border rounded-lg px-3 py-2 mt-1 h-24 focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n                          value={settings.aiSystemPrompt ?? ''}\n                          onChange={(e) => updateSettings({ aiSystemPrompt: e.target.value })}\n                          placeholder=\"You are a helpful AI assistant.\"\n                        />\n                      </label>\n                    </div>\n                    \n                    <CheckboxInput\n                      label=\"Stream Responses\"\n                      checked={settings.aiStreamResponses ?? true}\n                      onChange={(checked) => updateSettings({ aiStreamResponses: checked })}\n                      helper=\"Show responses as they're generated\"\n                    />\n                    \n                    <CheckboxInput\n                      label=\"Retain Context\"\n                      checked={settings.aiRetainContext ?? true}\n                      onChange={(checked) => updateSettings({ aiRetainContext: checked })}\n                      helper=\"Remember conversation history\"\n                    />\n                  </div>\n                </FormSection>\n              </>\n            )}\n          </div>\n\n          {/* Live Preview Panel - Sticky */}\n          <div className=\"xl:sticky xl:top-6\">\n            <LivePreview branding={settings} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"